// src/app/(roles)/employer/control/sections/profile-section.tsx
'use client';

import React, { useEffect, useState, useRef } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { employerProfileSchema, type EmployerProfileFormData } from '../profile-schema';
import { getEmployerProfile, saveEmployerProfile } from '../actions';
import { generateCompanyProfileFromWebsite, type GenerateCompanyProfileFromWebsiteOutput, type GenerateCompanyProfileFromWebsiteInput } from '@/ai/flows/ai-company-profile-generator';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription as AutoGenerateDialogDescription, DialogFooter as ShadDialogFooter, DialogTrigger } from '@/components/ui/dialog'; // ShadDialogFooter to avoid conflict
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Save, Image as ImageIcon, UploadCloud, Trash2, Briefcase, MapPin, Mail, Phone, Globe, Users, Info, CalendarDays, Sparkles, ExternalLink, Linkedin, Twitter } from 'lucide-react';
import Image from 'next/image';
import { Separator } from '@/components/ui/separator';

const MAX_LOGO_SIZE_MB = 2;
const MAX_LOGO_SIZE_BYTES = MAX_LOGO_SIZE_MB * 1024 * 1024;
const ALLOWED_LOGO_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/svg+xml'];

const ProfileIcon = Briefcase; // Or any other icon you prefer for profiles

const initialProfileValues: EmployerProfileFormData = {
    companyName: '',
    officialEmail: '',
    companyLogoUrl: null,
    address: null,
    contactNumber: null,
    companyWebsite: null,
    teamSize: null,
    yearOfEstablishment: null,
    aboutCompany: null,
    linkedinUrl: null,
    xUrl: null,
};

// Define the fields that the AI will attempt to populate
const AI_POPULATABLE_FIELDS: Array<keyof EmployerProfileFormData> = [
  'companyName', 'address', 'officialEmail', 'contactNumber', 
  'teamSize', 'yearOfEstablishment', 'aboutCompany', 'linkedinUrl', 'xUrl'
];


export default function ProfileSection() {
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [logoPreview, setLogoPreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [currentUserId, setCurrentUserId] = useState<number | null>(null);

  const [isGeneratingProfile, setIsGeneratingProfile] = useState(false);
  const [isAutoGenerateDialogOpen, setIsAutoGenerateDialogOpen] = useState(false);
  const [autoGenerateWebsiteUrl, setAutoGenerateWebsiteUrl] = useState('');


  const form = useForm<EmployerProfileFormData>({
    resolver: zodResolver(employerProfileSchema),
    defaultValues: initialProfileValues,
  });

  useEffect(() => {
    const userIdStr = localStorage.getItem('userId');
    const userEmail = localStorage.getItem('userEmail'); // Retrieve email for default officialEmail

    if (userIdStr) {
      const id = parseInt(userIdStr, 10);
      if (!isNaN(id)) {
        setCurrentUserId(id);
      } else {
        toast({ title: 'Error', description: 'Invalid user ID found.', variant: 'destructive' });
        setIsLoading(false);
        return;
      }
    } else {
      toast({ title: 'Authentication Error', description: 'User not logged in. Please log in to manage your profile.', variant: 'destructive' });
      setIsLoading(false);
      return;
    }

    async function loadProfile(userIdToLoad: number) {
      setIsLoading(true);
      const response = await getEmployerProfile(userIdToLoad);
      if (response.success) {
        if (response.data) {
          // Ensure numeric fields are numbers or null, not empty strings or 0 if that's not desired
          const dataWithCorrectedNulls = {
            ...initialProfileValues, // Start with defaults to ensure all keys exist
            ...response.data,
            teamSize: response.data.teamSize === 0 || response.data.teamSize === undefined ? null : Number(response.data.teamSize),
            yearOfEstablishment: response.data.yearOfEstablishment === 0 || response.data.yearOfEstablishment === undefined ? null : Number(response.data.yearOfEstablishment),
          };
          form.reset(dataWithCorrectedNulls);
          if (response.data.companyLogoUrl) {
            setLogoPreview(response.data.companyLogoUrl);
            localStorage.setItem('companyLogoUrl', response.data.companyLogoUrl);
          } else {
            setLogoPreview(null);
            localStorage.removeItem('companyLogoUrl');
          }
        } else {
           // If no profile data, set default with user's email for officialEmail
           const defaultValuesWithEmail = {
            ...initialProfileValues,
            officialEmail: userEmail || '', // Set officialEmail from logged-in user's email
          };
           form.reset(defaultValuesWithEmail);
           setLogoPreview(null);
           localStorage.removeItem('companyLogoUrl');
           if(response.message) { // Show message like "No profile found, create one"
            toast({ title: 'Company Profile', description: response.message, variant: 'default' });
           }
        }
      } else if (response.error) {
        toast({
          title: 'Error Loading Profile',
          description: response.error,
          variant: 'destructive',
        });
      }
      setIsLoading(false);
    }

    if (currentUserId) { // Only call loadProfile if currentUserId is set
        loadProfile(currentUserId);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [form, toast, currentUserId]); // Removed form.reset as direct dependency of useEffect; form instance itself is stable.

  const handleLogoFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.size > MAX_LOGO_SIZE_BYTES) {
        form.setError('companyLogoUrl', { message: `File size should be less than ${MAX_LOGO_SIZE_MB}MB.` });
        setLogoPreview(form.getValues('companyLogoUrl') || null); // Revert to old or null if error
        if(fileInputRef.current) fileInputRef.current.value = ''; // Clear file input
        return;
      }
      if (!ALLOWED_LOGO_TYPES.includes(file.type)) {
        form.setError('companyLogoUrl', { message: 'Invalid file type. Please use JPG, PNG, GIF, or SVG.' });
        setLogoPreview(form.getValues('companyLogoUrl') || null);
        if(fileInputRef.current) fileInputRef.current.value = '';
        return;
      }

      const reader = new FileReader();
      reader.onloadend = () => {
        const dataUri = reader.result as string;
        form.setValue('companyLogoUrl', dataUri, { shouldValidate: true, shouldDirty: true });
        setLogoPreview(dataUri);
        localStorage.setItem('companyLogoUrl', dataUri); // Update localStorage
        form.clearErrors('companyLogoUrl');
      };
      reader.onerror = () => {
        form.setError('companyLogoUrl', { message: 'Failed to read file.' });
        setLogoPreview(form.getValues('companyLogoUrl') || null);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeLogo = () => {
    form.setValue('companyLogoUrl', null, { shouldValidate: true, shouldDirty: true });
    setLogoPreview(null);
    localStorage.removeItem('companyLogoUrl'); // Remove from localStorage
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    form.clearErrors('companyLogoUrl');
  };

  const onSubmit = async (data: EmployerProfileFormData) => {
    if (!currentUserId) {
      toast({ title: 'Error', description: 'User ID not found. Cannot save profile.', variant: 'destructive' });
      return;
    }
    setIsSaving(true);
    const dataToSave: EmployerProfileFormData = {
        ...data,
        // Ensure numeric fields are numbers or null, not empty strings
        teamSize: data.teamSize === '' || data.teamSize === undefined ? null : Number(data.teamSize),
        yearOfEstablishment: data.yearOfEstablishment === '' || data.yearOfEstablishment === undefined ? null : Number(data.yearOfEstablishment),
        // Ensure other optional fields are null if empty
        address: data.address || null,
        contactNumber: data.contactNumber || null,
        companyWebsite: data.companyWebsite || null,
        aboutCompany: data.aboutCompany || null,
        linkedinUrl: data.linkedinUrl || null,
        xUrl: data.xUrl || null,
        companyLogoUrl: data.companyLogoUrl || null, // Already handles null/string
    };

    const response = await saveEmployerProfile(currentUserId, dataToSave);
    if (response.success) {
      toast({
        title: 'Profile Saved',
        description: response.message || 'Your profile has been updated successfully.',
        variant: 'default',
      });
      form.reset(dataToSave, { keepValues: true, keepDefaultValues: false }); // Keep new values, don't revert to initial on successful save
      // Update localStorage for logo and company name if they changed
      if (dataToSave.companyLogoUrl) {
          setLogoPreview(dataToSave.companyLogoUrl); // Update preview state
          localStorage.setItem('companyLogoUrl', dataToSave.companyLogoUrl);
      } else {
          setLogoPreview(null);
          localStorage.removeItem('companyLogoUrl');
      }
      if (dataToSave.companyName && localStorage.getItem('companyName') !== dataToSave.companyName) {
          localStorage.setItem('companyName', dataToSave.companyName);
      }
    } else {
      toast({
        title: 'Save Failed',
        description: response.error || 'Could not save profile.',
        variant: 'destructive',
      });
      if (response.validationErrors) {
        response.validationErrors.forEach(err => {
          form.setError(err.path.join('.') as keyof EmployerProfileFormData, { message: err.message });
        });
      }
    }
    setIsSaving(false);
  };

  const handleAutoGenerateProfileFromDialog = async () => {
    if (!autoGenerateWebsiteUrl.trim()) {
      toast({
        title: 'Website URL Needed',
        description: 'Please enter your company website URL to auto-generate profile details.',
        variant: 'destructive',
      });
      return;
    }
    
    // Basic client-side validation for URL format
    let validUrl = autoGenerateWebsiteUrl.trim();
    if (!validUrl.startsWith('http://') && !validUrl.startsWith('https://')) {
        // Prepend https:// if no protocol is present
        validUrl = `https://${validUrl}`;
    }

    try {
        new URL(validUrl); // Test if it's a valid URL after potential prepending
    } catch (_) {
        toast({
            title: 'Invalid URL',
            description: 'Please enter a valid company website URL (e.g., https://example.com or www.example.com).',
            variant: 'destructive',
        });
        return;
    }

    setIsGeneratingProfile(true);
    try {
      const inputForAI: GenerateCompanyProfileFromWebsiteInput = { companyWebsite: validUrl };
      const result: GenerateCompanyProfileFromWebsiteOutput = await generateCompanyProfileFromWebsite(inputForAI);

      let fieldsPopulatedCount = 0;
      // Iterate over the keys defined in AI_POPULATABLE_FIELDS to ensure we only try to set values for expected fields
      AI_POPULATABLE_FIELDS.forEach(key => {
        const aiValue = result[key as keyof GenerateCompanyProfileFromWebsiteOutput]; // Cast key
        // Check if AI provided a meaningful value (not undefined, null, or empty string)
        const hasMeaningfulAiValue = aiValue !== undefined && aiValue !== null && (typeof aiValue !== 'string' || aiValue.trim() !== '');
        
        if (hasMeaningfulAiValue) {
          if (key === 'teamSize' || key === 'yearOfEstablishment') {
            const numericValue = Number(aiValue);
            if (!isNaN(numericValue) && numericValue > 0) { // Ensure it's a positive number
              form.setValue(key, numericValue, { shouldValidate: true, shouldDirty: true });
              fieldsPopulatedCount++;
            } else if (aiValue === null && form.getValues(key) !== null) { // AI suggests null for a field that had a value
              form.setValue(key, null, { shouldValidate: true, shouldDirty: true });
               fieldsPopulatedCount++; // Count if we are clearing a previously set value
            }
          } else {
            // For string fields, including URLs. Zod will validate URL format on submit.
            form.setValue(key, aiValue as any, { shouldValidate: true, shouldDirty: true });
            fieldsPopulatedCount++;
          }
        }
      });
      
      // Always set the companyWebsite field to the URL the user provided for generation
      // This ensures the form reflects the URL used, even if AI doesn't explicitly return it or returns a different one.
      form.setValue('companyWebsite', validUrl, { shouldValidate: true, shouldDirty: true });
      if (!result.companyWebsite) fieldsPopulatedCount++; // Count setting the website if AI didn't return it


      if (fieldsPopulatedCount > 0) {
        toast({
          title: 'Profile Details Populated',
          description: `AI successfully populated ${fieldsPopulatedCount} field(s). Please review and complete your profile.`,
          variant: 'default',
          duration: 7000,
        });
      } else {
         toast({
          title: 'No New Details Extracted',
          description: 'AI could not extract additional details, or the details matched your current profile. The website URL has been set.',
          variant: 'default',
           duration: 7000,
        });
      }
      form.trigger(); // Trigger validation for the whole form
      setIsAutoGenerateDialogOpen(false);
      setAutoGenerateWebsiteUrl('');
    } catch (error: any) {
      console.error('Error auto-generating profile:', error);
      toast({
        title: 'AI Generation Failed',
        description: error?.message || 'Could not auto-generate profile details. Please try again or fill manually.',
        variant: 'destructive',
      });
    } finally {
      setIsGeneratingProfile(false);
    }
  };


  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center p-8 min-h-[300px] bg-card rounded-xl border border-border shadow-lg">
        <Loader2 className="h-10 w-10 animate-spin text-primary" />
        <span className="mt-3 text-md text-muted-foreground">Loading Company Profile...</span>
      </div>
    );
  }

  if (!currentUserId && !isLoading) {
    return (
      <Card className="shadow-lg border-border rounded-xl overflow-hidden w-full">
        <CardHeader className="border-b border-border bg-secondary/20 p-5">
          <CardTitle className="text-xl flex items-center gap-2.5 text-primary"><ProfileIcon className="h-6 w-6" /> Company Profile</CardTitle>
        </CardHeader>
        <CardContent className="p-5 md:p-6">
          <p className="text-muted-foreground text-center">Please log in to view or manage your company profile.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-lg border-border rounded-xl overflow-hidden w-full">
      <CardHeader className="border-b border-border bg-secondary/20 p-5">
        <CardTitle className="text-xl flex items-center gap-2.5 text-primary"><ProfileIcon className="h-6 w-6" /> Company Profile</CardTitle>
        <CardDescription className="text-sm">Manage your company's public information and branding.</CardDescription>
      </CardHeader>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <CardContent className="p-5 md:p-6 space-y-3"> {/* Reduced outer space-y */}

            {/* Logo and AI Generate Section */}
            <div className="flex flex-col sm:flex-row items-center gap-6 mb-4">
                {/* Left side for logo */}
                <div className="flex flex-col items-center sm:items-start">
                    <div className="relative w-24 h-24 rounded-full border-2 border-primary/30 bg-secondary/50 flex items-center justify-center overflow-hidden shrink-0 shadow-md">
                    {logoPreview ? (
                        <Image src={logoPreview} alt="Company Logo Preview" layout="fill" objectFit="contain" />
                    ) : (
                        <ImageIcon className="h-12 w-12 text-muted-foreground/40" />
                    )}
                    <Button
                        type="button"
                        variant="outline"
                        size="icon"
                        className="absolute bottom-0 right-0 rounded-full bg-card text-primary hover:bg-primary/10 h-8 w-8 shadow-md border border-primary/40"
                        onClick={() => fileInputRef.current?.click()}
                        aria-label="Upload or change company logo"
                    >
                        <UploadCloud className="h-4 w-4" />
                    </Button>
                    </div>
                    {logoPreview && (
                        <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={removeLogo}
                            className="text-destructive hover:bg-destructive/10 gap-1.5 text-xs h-7 mt-1"
                        >
                            <Trash2 className="h-3 w-3" /> Remove
                        </Button>
                    )}
                    <FormField
                        control={form.control}
                        name="companyLogoUrl"
                        render={({ field }) => ( // field is not used here, direct interaction with fileInputRef
                            <FormItem className="w-full max-w-xs">
                            <FormControl><Input type="file" accept={ALLOWED_LOGO_TYPES.join(',')} onChange={handleLogoFileChange} ref={fileInputRef} className="hidden" /></FormControl>
                            <FormMessage />
                            </FormItem>
                        )}
                    />
                </div>

                {/* Right side for AI generate button */}
                <div className="flex flex-col items-center text-center sm:items-end sm:text-right sm:ml-auto sm:self-center"> {/* Adjusted for vertical centering */}
                    <Dialog open={isAutoGenerateDialogOpen} onOpenChange={setIsAutoGenerateDialogOpen}>
                        <DialogTrigger asChild>
                            <Button
                                type="button"
                                variant="outline"
                                className="group bg-gradient-to-br from-primary/10 to-accent/10 hover:from-primary/20 hover:to-accent/20 text-primary hover:text-accent border-primary/30 hover:border-accent/50 shadow-md hover:shadow-lg transition-all duration-300 ease-in-out h-11 px-5 text-sm font-semibold"
                                disabled={isGeneratingProfile}
                            >
                                <Sparkles className="mr-2 h-5 w-5 text-amber-500 transition-transform duration-500 group-hover:rotate-[360deg] group-hover:scale-125" />
                                Auto Generate Profile
                            </Button>
                        </DialogTrigger>
                        <DialogContent className="sm:max-w-md">
                            <DialogHeader>
                                <DialogTitle className="flex items-center gap-2"><Sparkles className="text-primary h-5 w-5"/> Auto-Generate Company Profile</DialogTitle>
                                <AutoGenerateDialogDescription>
                                    Enter your company's website URL. AI will attempt to extract and fill in profile details based on common website patterns. It does not browse the live URL.
                                </AutoGenerateDialogDescription>
                            </DialogHeader>
                            <div className="py-4 space-y-2">
                                <Label htmlFor="auto-generate-website-url" className="font-medium">Company Website URL</Label>
                                <Input
                                    id="auto-generate-website-url"
                                    type="url" // Keep type="url" for browser hints, Zod will handle www.
                                    placeholder="https://www.example.com or www.example.com"
                                    value={autoGenerateWebsiteUrl}
                                    onChange={(e) => setAutoGenerateWebsiteUrl(e.target.value)}
                                    className="focus:ring-primary focus:border-primary"
                                />
                            </div>
                            <ShadDialogFooter>
                                <Button variant="ghost" onClick={() => { setIsAutoGenerateDialogOpen(false); setAutoGenerateWebsiteUrl(''); }} disabled={isGeneratingProfile}>Cancel</Button>
                                <Button onClick={handleAutoGenerateProfileFromDialog} disabled={isGeneratingProfile || !autoGenerateWebsiteUrl.trim()} className="bg-primary text-primary-foreground hover:bg-primary/90">
                                    {isGeneratingProfile ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <ExternalLink className="mr-2 h-4 w-4" />}
                                    {isGeneratingProfile ? 'Generating...' : 'Proceed'}
                                </Button>
                            </ShadDialogFooter>
                        </DialogContent>
                    </Dialog>
                    <p className="text-xs text-muted-foreground mt-1.5 text-center sm:text-right max-w-[280px]">
                        Using this you can auto generate company profile using your website link.
                    </p>
                </div>
            </div>

            <Separator className="my-4" />


            <div className="space-y-3"> {/* Reduced space-y for inner field groups */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                    <FormField control={form.control} name="companyName" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Briefcase className="h-4 w-4 mr-1.5 text-muted-foreground" />Company Name <span className="text-destructive ml-1">*</span></FormLabel>
                        <FormControl><Input placeholder="Your Company Inc." {...field} value={field.value ?? ''} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                    <FormField control={form.control} name="officialEmail" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Mail className="h-4 w-4 mr-1.5 text-muted-foreground" />Official Email <span className="text-destructive ml-1">*</span></FormLabel>
                        <FormControl><Input type="email" placeholder="contact@company.com" {...field} value={field.value ?? ''}/></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                </div>
            </div>

            <div className="space-y-3">
                <FormField control={form.control} name="address" render={({ field }) => (
                    <FormItem>
                    <FormLabel className="flex items-center font-medium text-sm"><MapPin className="h-4 w-4 mr-1.5 text-muted-foreground" />Address</FormLabel>
                    <FormControl><Textarea placeholder="123 Main St, Anytown, State, Country" {...field} value={field.value ?? ''} rows={2} /></FormControl>
                    <FormMessage />
                    </FormItem>
                )} />
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                    <FormField control={form.control} name="contactNumber" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Phone className="h-4 w-4 mr-1.5 text-muted-foreground" /> Contact Number</FormLabel>
                        <FormControl><Input type="tel" placeholder="e.g., +91 9876543210" {...field} value={field.value ?? ''} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                    <FormField control={form.control} name="companyWebsite" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Globe className="h-4 w-4 mr-1.5 text-muted-foreground" /> Company Website</FormLabel>
                        <FormControl><Input type="text" placeholder="www.company.com or https://company.com" {...field} value={field.value ?? ''} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                    <FormField control={form.control} name="teamSize" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Users className="h-4 w-4 mr-1.5 text-muted-foreground" /> Team Size</FormLabel>
                        <FormControl><Input type="number" placeholder="e.g., 50" {...field} value={field.value === null ? '' : String(field.value)} onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                     <FormField control={form.control} name="yearOfEstablishment" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><CalendarDays className="h-4 w-4 mr-1.5 text-muted-foreground" /> Year of Establishment</FormLabel>
                        <FormControl><Input type="number" placeholder="e.g., 2010" {...field} value={field.value === null ? '' : String(field.value)} onChange={e => field.onChange(e.target.value === '' ? null : Number(e.target.value))} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                </div>
                <FormField control={form.control} name="aboutCompany" render={({ field }) => (
                    <FormItem>
                    <FormLabel className="flex items-center font-medium text-sm"><Info className="h-4 w-4 mr-1.5 text-muted-foreground" />About Company (Max 1200 characters)</FormLabel>
                    <FormControl><Textarea placeholder="Describe your company, mission, values, and culture." {...field} value={field.value ?? ''} rows={4} className="min-h-[120px]" /></FormControl>
                    <FormMessage />
                    </FormItem>
                )} />
                 <Separator className="my-4" />
                <h4 className="text-md font-semibold text-foreground flex items-center">Social Media Profiles</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
                    <FormField control={form.control} name="linkedinUrl" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Linkedin className="h-4 w-4 mr-1.5 text-muted-foreground" /> LinkedIn URL</FormLabel>
                        <FormControl><Input type="text" placeholder="https://linkedin.com/company/yourcompany" {...field} value={field.value ?? ''} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                     <FormField control={form.control} name="xUrl" render={({ field }) => (
                        <FormItem>
                        <FormLabel className="flex items-center font-medium text-sm"><Twitter className="h-4 w-4 mr-1.5 text-muted-foreground" /> X (Twitter) URL</FormLabel>
                        <FormControl><Input type="text" placeholder="https://x.com/yourcompany" {...field} value={field.value ?? ''} /></FormControl>
                        <FormMessage />
                        </FormItem>
                    )} />
                </div>
            </div>
          </CardContent>
          <CardFooter className="border-t border-border p-5 bg-secondary/20 flex justify-end">
            <Button type="submit" disabled={isSaving || !form.formState.isDirty || isGeneratingProfile} className="min-w-[160px] h-11 text-sm font-semibold bg-primary text-primary-foreground hover:bg-primary/90 shadow-md">
              {isSaving ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
              {isSaving ? 'Saving...' : (form.getValues('id') ? 'Save Changes' : 'Create Profile')}
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
}

    
